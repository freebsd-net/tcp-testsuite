//
// Copyright (c) 2018 Michael Tuexen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

// Ensure that when a cookie of length 8 (valid) is provided by the server,
// it is accepted and used by a follow-up connections even if the server
// does not send it in followup connections.

--tolerance_usecs=10000

// Ensure that all relevant sysctl variables have their default values.
 0.00 `sysctl -w net.inet.tcp.rfc1323=1`
+0.00 `sysctl -w net.inet.tcp.sack.enable=1`
+0.00 `sysctl -w net.inet.tcp.ecn.enable=2`
+0.00 `sysctl -w kern.ipc.maxsockbuf=2097152`

// Reset the TCP fast open connection cache.
+0.00 `sysctl -w net.inet.tcp.fastopen.psk_enable=0`
+0.00 `sysctl -w net.inet.tcp.fastopen.client_enable=0`
+0.00 `sysctl -w net.inet.tcp.fastopen.client_enable=1`
+0.00 `sysctl -w net.inet.tcp.fastopen.server_enable=0`
+0.00 `sysctl -w net.inet.tcp.fastopen.server_enable=1`
+0.00 `sysctl -w net.inet.tcp.syncookies=0`
+0.00 `if [ ! -e ./setkey ]; then cc -o setkey setkey.c;fi; ./setkey`

// Now set up a TCP connection with the correct cookie
// and verify the SYN data is accepted
+0.00 socket(..., SOCK_STREAM, IPPROTO_TCP) = 9
+0.00 bind(9, ..., ...) = 0
+0.00 setsockopt(9, IPPROTO_TCP, TCP_FASTOPEN, [1], 4) = 0
+0.00 fcntl(9, F_SETFL, O_RDWR | O_NONBLOCK) = 0
+0.00 listen(9, 4) = 0
 0.50 < SP 0:100(100) win 65535 <mss 1460,nop,wscale 6,sackOK,TS val 31 ecr 0,FO 2069a359c930dba9,eol,eol>
+0.00 accept(9, ..., ...) = 10
+0.02 write(10, ..., 200) = 200
+0.00 > S. 0:200(200) ack 101 win 65535 <mss 1460,nop,wscale 6,sackOK,TS val 32 ecr 31,FO 2069a359c930dba9,eol,eol>
+0.00 < .  101:101(0) ack 201 win 65535 <nop,nop,TS val 33 ecr 32>
+0.00 read(10, ..., 100) = 100

// Close listening socket
+0.00 < F. 101:101(0) ack 201 win 65535 <nop,nop,TS val 34 ecr 32>
+0.00 >  . 201:201(0) ack 102 <nop,nop,TS val 35 ecr 34>
+0.00 close(9) = 0
+0.00 close(10) = 0
+0.00 > F. 201:201(0) ack 102 <nop,nop,TS val 36 ecr 34>
+0.05 <  . 102:102(0) ack 202 win 65535 <nop,nop,TS val 37 ecr 36>
