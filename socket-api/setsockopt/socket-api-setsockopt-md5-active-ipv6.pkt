//
// Copyright (c) 2023 Michael Tuexen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

--ip_version=ipv6
--udp_encapsulation=tcp
--tolerance_usecs=250000
--non_fatal=syscall
--tcp_md5_secret=secret

       `kldstat -q -m tcpmd5 || kldload tcpmd5; echo 'add fd3d:fa7b:d17d::1 2001:DB8::1 tcp 0x1000 -A tcp-md5 "secret" ;
              add 2001:DB8::1 fd3d:fa7b:d17d::1 tcp 0x1001 -A tcp-md5 "secret" ;' | setkey -c`

// Ensure that all relevant sysctl variables have their default variables.
 0.00 `sysctl -w net.inet.tcp.rfc1323=1`
+0.00 `sysctl -w net.inet.tcp.sack.enable=1`
+0.00 `sysctl -w net.inet.tcp.ecn.enable=2`
+0.00 `sysctl -w net.inet.tcp.rexmit_slop=200`
+0.00 `sysctl -w net.inet.tcp.rexmit_drop_options=0`
+0.00 `sysctl -w kern.ipc.maxsockbuf=2097152`
+0.00 `sysctl -w net.inet.tcp.recvspace=65536`
+0.00 `sysctl -w net.inet.tcp.sendspace=32768`
+0.00 `sysctl -w net.inet.tcp.insecure_rst=0`
+0.00 `sysctl -w net.inet.tcp.insecure_syn=0`
+0.00 `sysctl -w net.inet.tcp.udp_tunneling_port=9811`
+0.00 `sysctl -w net.inet.tcp.udp_tunneling_overhead=8`
// Flush host cache.
+0.00 `sysctl -w net.inet.tcp.hostcache.purgenow=1`
// Create a TCP endpoint in the ESTABLISHED state.
+0.00 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0.00 fcntl(3, F_GETFL) = 0x02 (flags O_RDWR)
+0.00 fcntl(3, F_SETFL, O_RDWR | O_NONBLOCK) = 0
+0.00 setsockopt(3, IPPROTO_TCP, TCP_MD5SIG, [1], 4) = 0
+0.00 setsockopt(3, IPPROTO_TCP, TCP_KEEPIDLE,[1], 4) = 0
+0.00 connect(3, ..., ...) = -1 EINPROGRESS (Operation now in progress)
+0.00 > S     0:0(0)                win 65535 <mss 1440,nop,wscale 6,sackOK,TS val 100 ecr 0,nop,nop,md5 valid>
// Check sending of RST if checking SEG.ACK fails.
+0.00 < S.    0:0(0)       ack    0 win 65535 <mss 1440,sackOK,md5 valid>
+0.00 > R     0:0(0)                win     0 <nop,nop,md5 valid>
// Continue with handshake.
+0.10 < S.    0:0(0)       ack    1 win 32767 <mss 1440,sackOK,md5 valid>
+0.00 >  .    1:1(0)       ack    1 win 65535 <nop,nop,md5 valid>
// Verify that there are no errors pending at the socket layer.
+0.10 getsockopt(3, SOL_SOCKET, SO_ERROR, [0], [4]) = 0
+0.00 setsockopt(3, IPPROTO_TCP, TCP_RACK_PACE_MAX_SEG, [2], 4) = 0
// Set the pacing rate to 100 MBit/sec.
+0.00 setsockopt(3, IPPROTO_TCP, TCP_RACK_PACE_RATE_SS, [1250000], 4) = 0
+0.00 setsockopt(3, IPPROTO_TCP, TCP_RACK_PACE_ALWAYS, [1], 4) = 0
// Check UDP port change in ESTABLISHED for segments with ACK.
+0.10 < F.    1:1(0)       ack    1 win 32767 <nop,nop,md5 valid>/udp(1 > 9811)
+0.00 > R     1:1(0)                win     0 <nop,nop,md5 valid>/udp(9811 > 1)
// Check UDP port change in ESTABLISHED for segments without ACK.
+0.10 < S     1:1(0)                win 32767 <nop,nop,md5 valid>/udp(1 > 9811)
+0.00 > R.    0:0(0)!      ack    2 win     0 <nop,nop,md5 valid>/udp(9811 > 1)
// Check sending of challenge ACK in response to RST segment
+0.10 < R     5:5(0)                win     0 <nop,nop,md5 valid>
+0.00 >  .    1:1(0)       ack    1 win 65535 <nop,nop,md5 valid>
// Check sending of challenge ACK in response to SYN segment
+0.10 < S     5:5(0)                win 65535 <mss 1440,sackOK,md5 valid>
+0.00 >  .    1:1(0)       ack    1 win 65535 <nop,nop,md5 valid>
// Send some data.
+0.00 send(3, ..., 1420, 0) = 1420
+0.00 > P.    1:1421(1420) ack    1 win 65535 <nop,nop,md5 valid>
+0.10 <  .    1:1(0)       ack 1421 win 32767 <nop,nop,md5 valid>
// Check keep-alives.
+1.00 >  . 1420:1420(0)    ack    1 win 65535 <nop,nop,md5 valid>
+0.10 <  .    1:1(0)       ack 1421 win 32767 <nop,nop,md5 valid>
// Test a fast retransmission
+0.00 send(3, ..., 5680, 0) = 5680
+0.00 >  . 1421:2841(1420) ack    1 win 65535 <nop,nop,md5 valid>
+0.00 >  . 2841:4261(1420) ack    1 win 65535 <nop,nop,md5 valid>
+0.00 >  . 4261:5681(1420) ack    1 win 65535 <nop,nop,md5 valid>
+0.00 > P. 5681:7101(1420) ack    1 win 65535 <nop,nop,md5 valid>
+0.10 <  .    1:1(0)       ack 1421 win 32767 <nop,nop,md5 valid,nop,nop,sack 2841:4261>
+0.00 <  .    1:1(0)       ack 1421 win 32767 <nop,nop,md5 valid,nop,nop,sack 2841:5681>
+0.00 <  .    1:1(0)       ack 1421 win 32767 <nop,nop,md5 valid,nop,nop,sack 2841:7101>
+0.00 >  . 1421:2841(1420) ack    1 win 65535 <nop,nop,md5 valid>
+0.10 <  .    1:1(0)       ack 7101 win 32767 <nop,nop,md5 valid>
// Tear it down.
+0.00 close(3) = 0
+0.00 > F. 7101:7101(0)    ack    1 win 65535 <nop,nop,md5 valid>
+0.10 < F.    1:1(0)       ack 7102 win 32767 <nop,nop,md5 valid>
+0.00 >  . 7102:7102(0)    ack    2 win 65535 <nop,nop,md5 valid>
// Check UDP port change in TIMEWAIT for segments with ACK.
+0.10 < F.    1:1(0)       ack 7102 win 32767 <nop,nop,md5 valid>/udp(1 > 9811)
+0.00 > R  7102:7102(0)             win     0 <nop,nop,md5 valid>/udp(9811 > 1)
// Check UDP port change in TIMEWAIT for segments without ACK.
+0.10 < S     1:1(0)                win 32767 <nop,nop,md5 valid>/udp(1 > 9811)
+0.00 > R.    0:0(0)!      ack    2 win     0 <nop,nop,md5 valid>/udp(9811 > 1)
// Check unexpected sequence number in TIMEWAIT.
+0.10 < F.    1:1(0)       ack 7102 win 32767 <nop,nop,md5 valid>
+0.00 >  . 7102:7102(0)    ack    2 win 65535 <nop,nop,md5 valid>

       `setkey -F`