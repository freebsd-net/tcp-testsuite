//
// Copyright (c) 2022 Michael Tuexen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

--ip_version=ipv4
--udp_encapsulation=tcp
--tolerance_usecs=250000
--non_fatal=syscall

// Ensure that all relevant sysctl variables have their default variables.
 0.00 `sysctl -w net.inet.tcp.rfc1323=1`
+0.00 `sysctl -w net.inet.tcp.blackhole=0`
+0.00 `sysctl -w net.inet.tcp.sack.enable=1`
+0.00 `sysctl -w net.inet.tcp.ecn.enable=2`
+0.00 `sysctl -w net.inet.tcp.rexmit_slop=200`
+0.00 `sysctl -w net.inet.tcp.rexmit_drop_options=0`
+0.00 `sysctl -w kern.ipc.maxsockbuf=2097152`
+0.00 `sysctl -w net.inet.tcp.recvspace=65536`
+0.00 `sysctl -w net.inet.tcp.sendspace=32768`
+0.00 `sysctl -w net.inet.tcp.insecure_rst=0`
+0.00 `sysctl -w net.inet.tcp.insecure_syn=0`
+0.00 `sysctl -w net.inet.tcp.udp_tunneling_port=9811`
+0.00 `sysctl -w net.inet.tcp.udp_tunneling_overhead=8`
// Flush host cache.
+0.00 `sysctl -w net.inet.tcp.hostcache.purgenow=1`
// Create a TCP endpoint in the ESTABLISHED state.
+0.00 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0.00 fcntl(3, F_GETFL) = 0x02 (flags O_RDWR)
+0.00 fcntl(3, F_SETFL, O_RDWR | O_NONBLOCK) = 0
+0.00 setsockopt(3, IPPROTO_IP, IP_TTL, [4], 4) = 0
+0.00 setsockopt(3, IPPROTO_TCP, TCP_KEEPIDLE,[1], 4) = 0
+0.00 connect(3, ..., ...) = -1 EINPROGRESS (Operation now in progress)
+0.00 > (ttl 4) S     0:0(0)                win 65535 <mss 1460,nop,wscale 6,sackOK,TS val 100 ecr 0>
// Check sending of RST if checking SEG.ACK fails.
+0.00 < (ttl 3) S.    0:0(0)       ack    0 win 65535 <mss 1460,sackOK,eol,eol>
+0.00 > (ttl 4) R     0:0(0)                win     0
// Continue with handshake.
+0.10 < (ttl 3) S.    0:0(0)       ack    1 win 32767 <mss 1460,sackOK,eol,eol>
+0.00 > (ttl 4)  .    1:1(0)       ack    1 win 65535
// Verify that there are no errors pending at the socket layer.
+0.10 getsockopt(3, SOL_SOCKET, SO_ERROR, [0], [4]) = 0
+0.00 setsockopt(3, IPPROTO_TCP, TCP_RACK_PACE_MAX_SEG, [2], 4) = 0
// Set the pacing rate to 100 MBit/sec.
+0.00 setsockopt(3, IPPROTO_TCP, TCP_RACK_PACE_RATE_SS, [1250000], 4) = 0
+0.00 setsockopt(3, IPPROTO_TCP, TCP_RACK_PACE_ALWAYS, [1], 4) = 0
// Check UDP port change in ESTABLISHED for segments with ACK.
+0.10 < (ttl 3) F.    1:1(0)       ack    1 win 32767/udp(1 > 9811)
+0.00 > (ttl 4) R     1:1(0)                win     0/udp(9811 > 1)
// Check UDP port change in ESTABLISHED for segments without ACK.
+0.10 < (ttl 3) S     1:1(0)                win 32767/udp(1 > 9811)
+0.00 > (ttl 4) R.    0:0(0)!      ack    2 win     0/udp(9811 > 1)
// Check sending of challenge ACK in response to RST segment
+0.10 < (ttl 3) R     5:5(0)                win     0
+0.00 > (ttl 4)  .    1:1(0)       ack    1 win 65535
// Check sending of challenge ACK in response to SYN segment
+0.10 < (ttl 3) S     5:5(0)                win 65535 <mss 1460,sackOK,eol,eol>
+0.00 > (ttl 4)  .    1:1(0)       ack    1 win 65535
// Send some data, change the TTL and send some data again.
+0.00 send(3, ..., 1460, 0) = 1460
+0.00 > (ttl 4) P.    1:1461(1460) ack    1 win 65535
+0.10 < (ttl 3)  .    1:1(0)       ack 1461 win 32767
+0.00 setsockopt(3, IPPROTO_IP, IP_TTL, [6], 4) = 0
+0.00 send(3, ..., 1460, 0) = 1460
+0.00 > (ttl 6) P. 1461:2921(1460) ack    1 win 65535
+0.10 < (ttl 3)  .    1:1(0)       ack 2921 win 32767
// Check keep-alives.
+1.00 > (ttl 6)  . 2920:2920(0)    ack    1 win 65535
+0.10 < (ttl 3)  .    1:1(0)       ack 2921 win 32767
// Test a fast retransmission
+0.00 send(3, ..., 5840, 0) = 5840
+0.00 > (ttl 6)  . 2921:4381(1460) ack    1 win 65535
+0.00 > (ttl 6)  . 4381:5841(1460) ack    1 win 65535
+0.00 > (ttl 6)  . 5841:7301(1460) ack    1 win 65535
+0.00 > (ttl 6) P. 7301:8761(1460) ack    1 win 65535
+0.10 < (ttl 3)  .    1:1(0)       ack 2921 win 32767 <sack 4381:5841, nop, nop>
+0.00 < (ttl 3)  .    1:1(0)       ack 2921 win 32767 <sack 4381:7301, nop, nop>
+0.00 < (ttl 3)  .    1:1(0)       ack 2921 win 32767 <sack 4381:8761, nop, nop>
+0.00 > (ttl 6)  . 2921:4381(1460) ack    1 win 65535
+0.10 < (ttl 3)  .    1:1(0)       ack 8761 win 32767
// Tear it down.
+0.00 close(3) = 0
+0.00 > (ttl 6) F. 8761:8761(0)    ack    1 win 65535
+0.10 < (ttl 3) F.    1:1(0)       ack 8762 win 32767
+0.00 > (ttl 6)  . 8762:8762(0)    ack    2 win 65535
// Check UDP port change in TIMEWAIT for segments with ACK.
+0.10 < (ttl 3) F.    1:1(0)       ack 8762 win 32767/udp(1 > 9811)
+0.00 > (ttl 6) R  8762:8762(0)             win     0/udp(9811 > 1)
// Check UDP port change in TIMEWAIT for segments without ACK.
+0.10 < (ttl 3) S     1:1(0)                win 32767/udp(1 > 9811)
+0.00 > (ttl 6) R.    0:0(0)!      ack    2 win     0/udp(9811 > 1)
// Check unexpected sequence number in TIMEWAIT.
+0.10 < (ttl 3) F.    1:1(0)       ack 8762 win 32767
+0.00 > (ttl 6)  . 8762:8762(0)    ack    2 win 65535
